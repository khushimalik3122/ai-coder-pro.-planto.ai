import { SupportedModel, ModelConfig, AIMessage, APIResponse } from './types';

export class ModelManager {
  private configs: Record<SupportedModel, ModelConfig>;

  constructor(configs: Record<SupportedModel, ModelConfig>) {
    this.configs = configs;
  }

  async sendMessage(model: SupportedModel, messages: AIMessage[], options?: { temperature?: number; maxTokens?: number }): Promise<APIResponse> {
    switch (model) {
      case 'grok':
        return this.callGrok(messages, options);
      case 'claude':
        // Placeholder for Claude
        throw new Error('Claude integration not implemented yet.');
      case 'openai':
        // Placeholder for OpenAI
        throw new Error('OpenAI integration not implemented yet.');
      case 'together':
        // Placeholder for Together
        throw new Error('Together integration not implemented yet.');
      default:
        throw new Error('Unsupported model: ' + model);
    }
  }

  private async callGrok(messages: AIMessage[], options?: { temperature?: number; maxTokens?: number }): Promise<APIResponse> {
    const apiKey = this.configs['grok'].apiKey;
    if (!apiKey) { throw new Error('Grok API key not set.'); }
    const body = {
      model: 'grok-1',
      messages: messages.map(m => ({ role: m.role, content: m.content })),
      max_tokens: options?.maxTokens || 1024,
      temperature: options?.temperature || 0.7
    };
    try {
      const response = await fetch('https://api.x.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
          'User-Agent': 'AI-Coder-Pro/1.0'
        },
        body: JSON.stringify(body)
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Grok API Error ${response.status}: ${errorText}`);
      }
      const data = await response.json();
      if (data && data.choices && data.choices.length > 0) {
        return {
          content: data.choices[0].message.content,
          model: 'grok',
          raw: data
        };
      }
      throw new Error('No completion generated by Grok');
    } catch (err: any) {
      throw new Error('Grok API call failed: ' + (err?.message || err));
    }
  }
} 